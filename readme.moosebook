[{"kind":1,"language":"markdown","value":"# Moosebook\n\nThis is a moosebook.\nYou can use it to code in Pharo inside a notebook (such as the famous Jupiter one)"},{"kind":1,"language":"markdown","value":"## Pharo"},{"kind":1,"language":"markdown","value":"Moosebooks uses the [Pharo](https://pharo.org/) programming language. In the following, we present you the basis of Pharo code."},{"kind":1,"language":"markdown","value":"### Create a variable"},{"kind":2,"language":"pharo","value":"myVariable := 'Hello World'"},{"kind":1,"language":"markdown","value":"As you can see above, in a moosebook, to declare a variable, we write its name, then we use the symbol `:=` and an expression corresponding to the value of the variable.\nIn the Pharo tab of VSCode, you'll see under the pane `\"Variables\"` the variables already existing and their value for this moosebook."},{"kind":1,"language":"markdown","value":"Variables are shared between cells"},{"kind":2,"language":"pharo","value":"myVariable"},{"kind":1,"language":"markdown","value":"## Moose analysis\n\n[Moose](https://modularmoose.org/) is a platform for software analysis.\n\nIf you want detailed information about Moose:\n\n- The [Moose Blog](https://modularmoose.org/posts/)\n- The [Moose Wiki](https://modularmoose.org/moose-wiki/)"},{"kind":1,"language":"markdown","value":"### My First analysis\n\nIn the following, we will present you how to perform your first analysis using Moose and a Moosebook.\n\nFirst, we will clone a Java Project, to do so, we will use the `MooseEasyUtility`"},{"kind":2,"language":"pharo","value":"javaProjectFileRef := MooseEasyUtility cloneGitHubRepo: 'https://github.com/bethrobson/Head-First-Design-Patterns'."},{"kind":1,"language":"markdown","value":"#### Parse the Java code to make FamixJava model\n\nOnce we have downloaded the Java code, we load [VerveineJ](https://github.com/moosetechnology/VerveineJ), a java parser that produces a FamixJava model\n\n> The FamixJava model is a representation of your code that can be loaded into Moose.\n"},{"kind":2,"language":"pharo","value":"client := ZnClient new.\n  client\n      signalProgress: false;\n      url: 'https://github.com/moosetechnology/VerveineJ/archive/refs/tags/v3.0.0.zip';\n      downloadTo: FileLocator imageDirectory.\n  client isSuccess\n      ifTrue: [ ZipArchive new\n              readFrom: (FileLocator imageDirectory / 'v3.0.0.zip') asFileReference pathString ;\n              extractAllTo: FileLocator imageDirectory.\n\n          \"Since permissions are not preserved with ZipArchive#extractAllTo:\"\n          \"This line is not required in Windows system\"\n          LibC runCommand: 'chmod u+x ', (FileLocator imageDirectory / 'VerveineJ-3.0.0/verveinej.sh') asFileReference pathString ]\n      ifFalse: [ Error signal: 'Download failed.' ]"},{"kind":2,"language":"pharo","value":"wizard := MooseEasyFamixMaker\n   generateMSETo: 'tmp/HFDP.mse' asFileReference\n   parsing: 'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns' asFileReference\n   with: (FileLocator imageDirectory / 'VerveineJ-3.0.0/verveinej.sh') asFileReference.\nwizard generateMSE."},{"kind":1,"language":"markdown","value":"#### Load the model"},{"kind":1,"language":"markdown","value":"The last step is to load the model in the Moose image (the one we are controlling using VSCode). In a new cell, execute:"},{"kind":2,"language":"pharo","value":"mseFileRef := 'tmp/HFDP.mse' asFileReference. \"Generated by FamixMaker\"\nmseStream := mseFileRef readStream.\nmseStream\n ifNotNil: [ \n  mooseModel := FamixJavaModel importFromMSEStream: mseStream. \n  mooseModel rootFolder:\n      'tmp/MooseEasyRepos/bethrobson__Head-First-Design-Patterns'.\n  mseStream close. ]\n ifNil: [ self error: \n    'Could not load MSE file into Moose: ' , mseFileRef asString ].\nmseStream.\nmooseModel install"},{"kind":1,"language":"markdown","value":"#### Analysis"},{"kind":1,"language":"markdown","value":"##### Using Pharo"},{"kind":1,"language":"markdown","value":"We can search the classes with a big cyclomatic complexity"},{"kind":2,"language":"pharo","value":"((mooseModel allBehaviourals)\n    collect: [ :entity | entity -> entity cyclomaticComplexity ]\n    thenSelect: [ :assoc | assoc value > 3 ]) asOrderedCollection sort: #value descending"}]